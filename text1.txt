Dokumentation:
Betriebssysteme Übung
Janika Finken (59420)
Jessica Krawutschke (59847)
Ga Young Volk (59319)
Jingye Zhang (59690)
1Inhaltsverzeichnis
Aufgabenstellung ...................................................................................................................................... 3
Aufgabe 1: Read-Only File System............................................................................................................. 4
Aufgabe 1a: Aufbau von MyFS- Containerdateien ........................................................................... 4
Größenberechnung ........................................................................................................................... 5
Aufgabe 1b: Erstellen und Befüllen von MyFS- Containerdateien ........................................................ 8
Argumente bestimmen ..................................................................................................................... 8
Extra Files erstellen ........................................................................................................................... 8
Methoden in code.cpp: ..................................................................................................................... 9
Aufgabe 1c: Einbinden von MyFS- Containerdateien.......................................................................... 12
Umbruch in der Umsetzung des Projekts! .............................................................................................. 14
Aufgabe 2: Read-Write File System ......................................................................................................... 15
Aufgabe 2a: Anpassen des Aufbaus von MyFS-Containerdateien ...................................................... 15
Aufgabe 2b: Implementierung der Operationen zum Anlegen, Schreiben, Ändern, Löschen von
Dateien ................................................................................................................................................ 16
Umgang mit Terminal und Tests .............................................................................................................. 17
Befehlssammlung für Terminal ............................................................................................................... 22
2Aufgabenstellung
Zur Ergänzung und Vertiefung der Inhalte der Vorlesung „Betriebssysteme“ werden wir in der
Veranstaltung „Betriebssysteme Übung“ ein eigenes Dateisystem schreiben!
Rahmenbedingungen:
- Dieses umfangreiche Projekt bearbeiten wir zusammen in einer vierer Gruppe.
- Vertiefung des (Betriebs-)systemnahen Programmierens unter C++
- Insbesondere Funktionsweise von Dateisystemen und deren Verwendung in Linux (UNIX)
- Benutzung von FUSE
FUSE (“Filesystem in Userspace”) ist ein Interface, dass es uns ermöglicht, unser eigenes Dateisystem
für Linuxsysteme im Userspace zu schreiben, ohne über die Kernelmode-Ebene gehen zu müssen. Wir
schreiben also unser eigenes kleines privates Dateisystem mit Hilfe dieser Bibliothek. So können wir
uns ohne weiteres tiefergehendes Verständnis über die Arbeitsweise des Kernels auf die Struktur des
Dateisystems konzentrieren.
Da nur über den Kernel Zugriffe auf die Festplatte unternommen werden können, simulieren wir
unsere Rootverzeichnis in einem selbsterstelltem Ordner „Mountpoint“.
Erstellt werden soll ein Dateisystem MyFS, die dazu verwendet wir, um Containerdateien zu „forma-
tieren“. Die Containerdatei ist eine binäre Datei, die als Ersatz für einen “realen“ Datenträger fun-
giert.
Eine MyFS-Containerdatei kann (wie jedes Dateisystem) in den Verzeichnisbaum eingebunden wer-
den, wobei der Einbindungsort ein frei wählbares, leeres Verzeichnis ist. Beim Öffnen des gewähltem
Ordners erscheint diese in diesem Verzeichnis
3Aufgabe 1: Read-Only File System
Aufgabe 1a: Aufbau von MyFS- Containerdateien
Grundidee: Aufgrund der Aufgabenstellung ist es uns offengestellt mit festen Datenmengen zu
arbeiten.
Da sich die Speichergröße nicht dynamisch verändert, können wir die MyFS- Containierdateigröße fest
bestimmen: Einzelne Elemete haben feste Speicheradressen/ Größen und können vorab berechnet
und in der myfs-structs.h Datei definiert werden.
#define
#define
#define
#define
#define
NUMBEROF_SUPERBLOCK 1
NUMBEROF_DMAP 15
NUMBEROF_FAT 480
NUMBEROF_ROOT 64
NUMBEROF_DATA 61440
Wir haben zunächst die Struktur des MyFS- Containerdatei besprochen.
Wir haben uns zunächst mit der Größe des Datenbereichs beschäftigt, da die Größenberechnung der
DMAP und FAT abhängt.
Da das Rootverzeichnis inhaltliche Vorlagen (Dateiname, Dateigröße, Zugriffsberechtigung, etc.) hat,
müssen wir die benötigte Platzmenge abschätzen.
Da wir ein statisches System bauen, sind im Superblock nur rudimentär Informationen enthalten.
Gegen Ende haben wir beschlossen, dass wir zur Sicherheit einen Block dafür einplanen.
Wir haben uns dafür entschlossen, die MyFS- Containerdatei als ein riesiges, zusammenhängendes
und geordnetes Array im Speicher umzusetzen. Dadurch entspricht der Arrayindex der Zugriffadresse.
4Größenberechnung
Daten
Vorgabe: Speicherplatz soll mindestens 30 MB betragen. Wie viele Blöcke müssen wir reservieren?
1. Datengröße in Byte umrechnen:
30 MB = 30 * 10242 Byte
2. Blockanzahl ermitteln.
1 Block = 512 Byte
(30 * 10242)/ 512 = 30 * 2 * 1024= 61440 Blöcke
DMAP
Die DMAP ist das Verzeichnis der freien und belegten Datenblöcke. Einzelne Bits geben uns Auskunft
über die Belegung der Datenblöcke.
Diese Information reduziert sich auf ein simples Ja-/Nein-System, weshalb sie sich bitweise mit 0 = frei
und 1 = belegt darstellen lassen. Ein Bit repräsentiert einen Datenblock.
1. Blockanzahl der Daten:
61440 Blöcke
2. Ein Bit repräsentiert einen Datenblock:
61440 Blöcke in den Daten → 61440 Bits in der DMAP
3. Wie viele Bit hat ein Block?
512 Byte * 8 = 4096 Bit
4. Wie viele Blöcke entsprechen den Bits?
⎾
61440 Bits (in der DMAP)
4096 Bits (eines einzelnen Blocks)
5. Welchen Datentyp sollen wir nutzen?
⏋ = 15 Blöcke
Wir nutzen u_int32_t, weil dieser Datentyp eine fixe Größe besitzt. Die Größen anderer
Datentypen können je Hardware variieren.
static u_int32_t dMap[NUMBEROF_DINDEX]; //Dmap Länge= 1920, je 32 Bit fest lang
5FAT (File Allocation Table)
FAT steht für eine Tabelle mit den Inhaltsverzeichnissen aller Dateiteile, die auf einem
Dateisystem gespeichert sind. Jedes Cluster auf dem Dateisystem hat in der FAT-Tabelle einen Eintrag.
Die Einträge kennzeichnen die Zuordnung von Dateiteilen zu einem Cluster. Jeder Dateieintrag ist mit
weiteren Dateieinträgen verkettet, beginnend beim ersten Cluster.
Mit einem Array können wir leicht die Verkettung der Blöcke darstellen. In dem entsprechenden Index
des Arrays steht die nächste Blocknummer einer Verkettung.
Der Datentyp unsigned short int eignet sich als Datentyp für das Array, da der Datenbereich
2 16 -1 = 65535 > 61440 Bits (für Anzahl Blöcke in der DMAP).
Vorläufig nutzen wir das „\0“ um das End of File (EOF) zu markieren. Da es sich hierbei um ein ASCII-
Zeichen handelt, wissen wir momentan nicht, ob das Programm deshalb Fehler werfen wird.
Update 12.05.16: End of File= 0xFFFF, da durch 2 16 -1 = 65535 die 65536 niemals erreicht werden
kann.
static unsigned short int fat[NUMBEROF_DATA]; //16 Bit fuer Index reicht, weil 2^16=65526>61440
Rootverzeichnis
Im Rootverzeichnis werden Datei-Informationen, wie zum Beispiel Dateiname, Dateigröße,
Zugriffsberechtigung, etc., gespeichert.
Die Informationen, die für die Befüllung der Verzeichniseinträge benötigt werden,
können durch die C-Funktion stat() abgefragt werden.
Aus technischen Gründen definieren wir pro abgespeicherter Datei einen Block. Da wir eine
Begrenzung an Dateien vorgegeben haben, benötigen wir insgesamt 64 Blöcke für das
Rootverzeichnis.
static directoryEntry root[NUMBEROF_ROOT]; // 64 Verzeichnisse insgesamt, je ein Block
Superblock
Im Grunde ist der Superblock in unserem Model überflüssig. Wir nutzen ihn jedoch zu Dokumentation
und Ausgabe der abgespeicherten Dateianzahl.
struct superblock{
char INFO[] = "NUMBER OF FILES: ";
unsigned int numberOfFiles=0;
};
static superblock sb; //infomation fehlt.
6Methoden
Für den Superblock sind folgende Methoden notwendig:
- Überprüfen der aktuellen Speicherauslastung (Wie viele Dateien können wir noch hinzufügen?)
- Initialisieren des Superblocks (Zu Beginn Anzahl der Dateien = 0)
- Ausgabe der Dateianzahl
- „Struct Superblock“ als „richtigen Block“ schreiben
Für die DMAP sind folgende Methoden notwendig:
- Initialisieren des DMAP (Zu Beginn alle Bits = 0)
- Setzen von Bits
- Status des Bits überprüfen
- Überprüfen, ob DMAP bereits voll
- Für einen neuen Eintrag nach freiem Bit suchen
- „Struct DMAP“ als „richtigen Block“ schreiben
Für die FAT sind folgende Methoden notwendig:
- Initialisieren der DMAP (Zu Beginn alle Bits = 0)
- „Struct DMAP“ als „richtigen Block“ schreiben
Für das Rootverzeichnis sind folgende Methoden notwendig:
- Initialisieren des Rootverzeichnis (Zu Beginn für alle das Attribut isUsed als false markieren)
- Für einen neuen Eintrag nach nächstem freien Platz suchen
- Informationen der anzulegenden Datei ins Rootverzeichnis schreiben
o Dateiname zuschneiden
o Attribute setzen
o isUsed auf true setzen
- „Struct Rootverzeichnis“ als „richtigen Block“ schreiben
Für den Datenblock der Dateien sind folgende Methoden notwendig:
- Inhalt der Datei einlesen (Charketten)
- Neue Daten im Rootverzeichnis angeben
- Auslesen einer bereits existierenden Datei
- „Struct Rootverzeichnis“ als „richtigen Block“ schreiben
7Aufgabe 1b: Erstellen und Befüllen von MyFS- Containerdateien
Aufgabenstellung:
Umsetzung:
In unserer Main Methode in der mkfs.myfs rufen wir die importFile Methode aus code.cpp auf, die
überprüft, ob eine Datei bereits existiert. Wenn nicht, dann wird ein Rootverzeichnis-Eintragt erzeugt
und die Datei in den Daten-Block geschrieben.
In der Methode changeTime aus code.cpp setzen wir die Attribute st_atime, st_ctime und st_mtime
auf die aktuelle Zeit gesetzt. Diese Methode wird zum Beispiel für createNewDirEntry gebraucht.
Argumente bestimmen
Es werden Argumente (Im Quelltext: argv) benötigt um Eingaben aus dem Terminal weiterzugeben.
Dadurch weiß das Betriebssystem was es mit unseren Befehlen machen soll.
Beispiel:
mkfs.myfs
container.bin
input/text2.txt
argv[0]
argv[1]
argv[2]
Extra Files erstellen
Brauchen Containerdatei als File
Hier wird unsere Containerdatei mit Superblock, FAT, DMAP, Rootverzeichnis und Datenblock
der Dateien und deren Attribute gespeichert.
Brauchen Log Datei als File
Gewisse Metadaten sollen schnell auslesbar sein und werden für Testzwecke in einer
separaten Datei gespeichert. Fehler werden hier sichtbar.
Brauchen einen „ MoundPoint“ als File
Hier entsteht unser abstraktes Filesystem. Wir erstellen irgendwo in unserem System einen
Überordner „mount“. Schreiben oder verändern wir Daten mit unseren Methoden, müssen
8reelle Änderungen im „mount“ Ordner entsprechend stattgefunden haben.
Methoden in code.cpp:
Methoden zur FAT:
- setFATBlockPointer
Schreibt einen Pointer an die entsprechende Stelle in der FAT und in die DMAP. Bei großen
Dateien ist ein Block vermutlich nicht genug, weshalb wir mehrere Blöcke benötigen, um
alle Daten einer einzigen Datei andressieren zu können.
Jeder Block hat einen Pointer zum nächsten Datenblock. Dadurch haben wir eine Kette
(vernetztes Array), das Pointer zum nächsten Datenblock enthält.
Dafür wird ein normales Array benutzt, wobei Index i des übergebenen Arguments für den
i-ten Dateiblock steht und der Inhalt des i-ten Blocks ist der Pointer auf den nächsten Block
(=dessen Index).
- readNextFATPointer
Gibt den verlinkten Wert eines FAT-Eintrags zurück, auf den ein übergebener Pointer zeigt.
- removeFatPointer
Der Inhalt im FAT-Array wir einfach wieder auf 0 gesetzt, um den FAT-Pointer zu löschen.
Methoden für das Rootverzeichnis:
- createdirEntry
Erstellt ein Directory Entry zu einer gegebenen Datei. Dieser Eintrag enthält dann I
Informationen über die Datei.
- createNewdirEntry
Wird benutzt, wenn wir eine neue Datei in unser Dateisystem speichern.
- writedirEntry
Schreibt den übergegeben Rootverzeichniseintrag in den ersten freien Block. -writeRootPointer
Schreibt einen Pointer zum Rootblock an eine noch freie Stelle.
- finddirEntry
Findet den Rootverzeichniseintrag zur passenden Datei.
-readroot
Gibt den Pfad eines gegebenen Pointers zurück.
- readNextRootPointer
Gibt den nächsten Pointer eines Rootverzeichniseintrags zurück.
Wenn der „alte Pointer“ -1 ist, also das Ende der Datei markiert, wird an den ersten
Rootverzeichniseintrag zurückgekehrt und 0 zurückgegeben.
- removeRootPointer
Löscht den Rootpointer zu einer übergebenen Datei (Pointer zu der Datei).
Dabei wird durch das Rootverzeichnis gelaufen, bis die richtige Datei gefunden ist.
- rootPointerCount
Gibt die Anzahl aller Pointer des Rootverzeichnisses zurück
- changeTime
Wird benötigt um zum Beispiel festzulegen, wann eine Datei das letzte mal verändert oder
überhaupt erst erstellt wurde.
9Methoden für Dateien:
- importFile
Überprüft, ob die Datei bereits existiert. Wenn nicht, dann wird ein Rootverzeichnis-Eintrag
erzeugt und die Datei in den DataBlock geschrieben.
Wenn die Datei so groß ist, dass ein Block nicht ausreicht, dann wir die Zusammengehörigkeit
mehrerer Blöcke in der FAT vermerkt.
- fileExists
Überprüft, ob eine Datei bereits existiert, damit keine Dateien doppelt abgespeichert werden
-removeFile
Löscht eine Datei und alles was zu ihr gehört. Der übergebene Pointer zeigt auf sie.
Man muss auch darauf achten, dass manche Dateien größer als in Block sind.
Dementsprechend muss man auch die Einträge in der FAT löschen.
Zuerst wird die Datei, dann die FAT und als letztes der Eintrag im Rootverzeichnis gelöscht.
- changeFileContent
Ändert den Inhalt einer Datei. Diese Methode wird in fuseWrite aufgerufen, wo die Datei
verändert werden kann. Wir können die Datei vollständig überschreiben oder am Ende etwas
hinzufügen.
- getAbsPath
Bestimmt den vollständigen Pfad des Übergebenen Arguments (Datei), welche sich in dem
aktuellen "working directory" befindet.
-write
Diese Methode nimmt ersten 512 Byte und schreibt sie in einen Block. Wenn die Datei größer
ist, dann wird ein neuer, freie Block gesucht, der passende FATPointer gesetzt, der Inhalt in
diesen Block gefüllt. Dieser Vorgang wird so lange wiederholt, bis die komplette Datei
gespeichert ist.
Methoden für Buffer:
- moveBuffer
Holt aus einem Puffer die Daten.
Wir haben zuvor einen Index gespeichert, bis wo wir die Daten eingelesen haben. Wenn wir
diesen nicht mehr finden, müssen wir ihn nochmal suchen.
Die Methode existiert einmal mit offset, durch welches wir bestimmen können, ab wo wir die
Daten auslesen möchten, und einmal ohne, wodurch alles aus dem Puffer ausgelesen wird.
- copyDataToBuffer
Kopiert Daten in einen Puffer. Mit „from“ bis „to“ kann man festlegen wie viel man kopieren
möchte und mit dem offset ist es sogar möglich mehrere Daten aus verschiedenen Blöcke im
Puffer zu speichern.
Durch diese Methode kann man Bytes aus einem Array in einen Puffer speichern.
Methoden für den Super-Block:
- writeSuperBlock
Schreibt den Superblock, welcher immer der erste Block in unserem File-System
ist und Informationen darüber enthält
- changeSBFileCount
10Ändert die gespeicherte Anzahl der Dateien im Superblock
Methoden für Blöcke:
- fillBlocks
Füllt die Blöcke zwischen den übergebenen Indexen mit Nullen
- findNextFreeBlock
Sucht nach einem freien Datenblock, indem sie durch die FAT läuft und jeden Block darauf
überprüft, ob er leer ist. Um dies zu erreichen wird durch drei for-Schleifen die FAT in Einsen
und Nullen dargestellt.
- deleteFollowingBlocks
Solange wir uns nicht bereits am Ende befinden, werden alle Fat-Block-Pointer und Inhalt des
betreffenden Blocks auf 0 gesetzt.
11Aufgabe 1c: Einbinden von MyFS- Containerdateien
Aufgabenstellung:
Umsetzung:
Das Kommando zur Einbindung der MyFS-Containerdatei wird im Terminal eingegeben. Siehe dazu bei
unseren Terminal-Kommandos nach.
Folgende Operationen in der Klasse MyFS müssenten implementiert werden:
• Zum Initialisieren / Freigeben einer Containerdatei
MyFS::fuseInit(), MyFS::fuseRelease()
• Zum Anzeigen eines Verzeichnisses
MyFS::fuseOpendir(), (*) MyFS::fuseReaddir(), MyFS::fuseReleasedir(), (*) MyFS::fuseGettatr()
• Zum Lesen einer Datei
MyFS::fuseOpen(), MyFS::fuseRead(), MyFS::fuseRelease()
12Im Folgenden werden unsere Operationen in der Klasse MyFS näher erläutert:
int MyFS::fuseReaddir
- mit dieser Methode definieren wir Befehle für die Konsole für unser Filesystem
- liefert Namen der Dateien im Verzeichnis zurück
int MyFS::fuseGetattr
- wir benötigen eine Methode, die Metadaten einer Datei sucht und ausliest
int MyFS::fuseOpen
- struct fuse_file_info *fileInfo ist hier bei der Übergabe zunächst noch leer
- über den Pfad suchen wir eine Datei im Rootverzeichnis, die wir dann im DataBuffer (in
Arrayformat) speichern um ihn später in fuseRead benutzen zu können
- fileInfo ist eine gegebene Struct . Darin befindet sich fh, welchen nur Integerwerte speichern
kann
können darin Index unseres Buffers speichern  zeigt uns, wo sich unser Zwischenspeicher
befindet. (Vermutlich leichter, diese Funktion nicht in fuseRead zu schreiben, sondern in
fuseOpen auszulagern)
int MyFS::fuseRead
- *fileInfo ist jetzt nicht mehr leer, da wir bei fuseOpen etwas reingespeichert haben. Dadurch
können wir jetzt auf den Inhalt unseres Zwischenspeichers zugreifen
- size bestimmt, wie viel wir auslesen und offset wo wir anfangen möchten
- Wir haben festgelegt wie man in gewissen, kritischen Fällen, wie zum Beispiel wenn offset
größer als Datei ist, ausliest.
Int MyFS:fuseInit
- die Methode fuseInit benutzen wir eigentlich nicht, da wir für das mounten auf unsere fest
definierte Struktur unseres Dateisystems zugreifen und nicht über den Superblock bei jedem
Mounten darauf zugreifen.
Die beiden Operationen MyFS::fuseRelease() und MyFS::fuseReleasedir() benötigen wir nicht, da wir
nicht aufräumen müssen.
13Umbruch in der Umsetzung des Projekts!
Es war uns mit unserer Vorgehensweise nicht möglich, das Projekt weiter voranzutreiben.
Verschiedene Stellen und Methoden im Quellcode warfen Fehler, die wir alleine nicht beheben
konnten. Nach Gesprächen mit unseren KommilitonInnen haben wir Unterschiede in unseren
Strukturen festgestellt und uns nochmal zusammengesetzt und über unsere bereits feste Architektur
diskutiert. Wir entschlossen uns, folgende Änderungen durchzuführen:
Struktur:
- Die DMAP ist keine Aneinanderreihung von einzelnen Bits mehr, sondern ein simpleres
Boolean Array. Somit benötigen wir keine Bitmaskenfunktionen mehr. Dadurch ändert sich
aber auch die Größe der DMAP zu 120 Blöcke:
o pro Eintrag 1 Boolean: 1 Byte=8 Bit
o vorher pro Eintrag 1Bit
o deshalb „alte DMAP Größe“ (15 Blöcke) * 8 = 120 Blöcke
- Die FAT (short int) wird zu uint32_t XXX Da uint32 doppelt so groß ist wie short int wird die
bisherige FAT Größe von 240 Blöcken auf 480 Blöcke erhöht.
Wir haben festgestellt, dass uint32_t sich besser eignet, da dieser Datentyp eine feste Größe
von 32 Bit besitzt und sich so gut zerlegen lässt. Das erleichtert uns das Schreiben der read und
write Methoden, da diese als Übergabeparameter ein char Array benötigt und wir beim
Zerlegen und Zusammensetzen weniger Fehler machen können.
- Superblock, Rootverzeichnis und Datenblöcke bleiben unverändert
Methoden:
- Da die DMAP nun mit boolean Werten arbeitet, benötigen wir keine zusätzliche Methode, die
mit Hilfe einer Bitmaskenfunktion das aktuell benötigte Bit findet. Bei dem Umgang mit einer
Maske können viele Fehler entstehen, da man z. B. mit unterschiedlichen Masken auf das
gleiche Ergebnis kommen kann oder Tage später selbst dem Autor das Nachvollziehen des
geschriebenen Quelltextes schwer fallen kann, oder der Code andere Teammitglieder verwirrt.
Da wir gegen Ende festgestellt haben, dass wir die DMAP nicht unbedingt benötigen, weil wir
auch mit der FAT freie Blöcke abfragen können, wird sie in unserem Dateisystem nicht mehr
benutzt.
- Die FAT bekommt neue Funktionen hinzugefügt:
14Aufgabe 2: Read-Write File System
Aufgabe 2a: Anpassen des Aufbaus von MyFS-Containerdateien
Unsere Struktur zur Verwaltung der freien Datenblöcke ist bereits in dem Kapitel zum Aufbau der
MyFS-Containerdatei erklärt und im Umbruch unserer Struktur genauer erläutert.
Wir benutzen anstatt der DMAP die FAT, um freie Datenblöcke ausfindig zu machen. Während unseres
Entwurf-Prozesses, haben wir festgestellt, dass sich die Umsetzung für die Verwaltung freier
Datenblöcke besser in der FAT umzusetzen ist.
15Aufgabe 2b: Implementierung der Operationen zum Anlegen, Schreiben, Ändern, Löschen von
Dateien
Es müssen mindestens folgende Methoden selbst implementiert werden:
• Zum Anlegen einer Datei MyFS::fuseMknod() (ggf. MyFS::fuseCreate() )
• Zum (Über-)Schreiben einer Datei MyFS::write()
• Zum Löschen einer Datei MyFS::unlink()
Im Folgenden werden unsere Fuse-Methoden weiter erläutert:
MyFS::fuseMknod()
- erzeugt eine neue Datei mit Rootverzeichniseintrag
int MyFS::fuseUnlink
- wir benötigen eine Methode, die zunächst den Pfad findet und dann die Datei mit
zugehörigem Pfad und Pointern und Rootverzeichniseintrag löscht
- dazu wird die Methode remove aus code.cpp benutzt
- zuerst wird die Datei, dann die FAT und als letztes der Eintrag im Rootverzeichnis gelöscht
int MyFS::fuseWrite
- mit fuseWrite kann man den Inhalt einer Datei verändern
- mit size kann ich festlegen, wie viel ich verändern möchte, mit offset, wo in der Datei ich
etwas ändern möchte und buf ist mein Inhalt, den ich in die schon vorhandene Datei einfügen
möchte
16Umgang mit Terminal und Tests
1. Innerhalb des Ordner
(Explorer) einen Rechtsklick
ausführen
2. Wir befinden uns im MyFS
Verzeichnis
3. make clean : die alten Ob-
jektdateien der letzten
Kompilierungsrunde lö-
schen
4. make all : lass “make tool”
das Target 'all' in der Make-
file erzeugen
175. In Terminal erscheint fol-
gender Inhalt.
6. Die Argumente für
mkfs.myfs übergeben, Con-
tainer Datei erzeugen, die
Datei in Container Datei
zum Kopieren übergeben.
7. Die Argumente für mount
übergeben und mit der Hil-
fe von Fuse die contai-
ner.bin einbinden.
188. In Terminal erscheint
folgender Inhalt.
Gemounted!
9. cd mount-dir : Wechsel un-
seres Verzeichnisses
10. ls: Auflistung von Dateien
(list)
1911. In Terminal erscheint fol-
gender Inhalt der data1.txt
(mit „q“ kann man diese
Screen verlassen).
12. Man kann zusätzlich ein
paar weitere Befehle aus-
probieren (siehe Befehls-
sammelung)
13. mit „..“ geh zu vorherieger
Verzeichnis und mit
„fusermount“ unmount!
2014. „mount-dir“ verschwindet
15. mit „rm“ kann man die Sa-
che (container.bin oder
log.txt) löschen.
21Befehlssammlung für Terminal
rm container.bin
Löschen von Containerdatei ("remove")
make clean
Alte Objektdateien der letzten Kompilierungsrunde löschen
make all
kommuniziert mit dem „make“ um “all” in der “Makefile” zu erzeugen#
./
Verzeichnis ausführen
./mkfs.myfs container.bin data1.txt data2.txt
Verzeichnis ausführen, erzeugen Containerdatei und kopieren data1.txt und data2.txt hinein
./mount.myfs home/jingye/Downloads/MyFS/container.bin home/jingye/Downloads/MyFS/logfile mount-dir
“Mounten”
cd ..
Wechseln des aktuellen Arbeitsverzeichnisses zu dem übergeordnetem Verzeichnis
cd .
Wechseln des aktuellen Arbeitsverzeichnisses zum Rootverzeichnis (oberster Ebene)
cd mount-dir
genanntes Verzeichnis öffnen
ls
Auflistung von Dateien ("list")
touch
Erstellen einer Datei
less data1.txt
genannte Datei auslesen
echo HI>>data2.txt
Konkatenation: Inhalt an die genannte Datei hinten anfügen.
echo hallo>data2.txt
Inhalt von genannter Datei mit eigegebenem Text überschreiben
cat data2.txt | head –n 10 |tail –n +2
Inhalt von der 2. Zeile bis zur 10. Zeile der genannte Datei lesen
fusermount –unmount mount-dir
“Unmounten”
22
